scalar Date

type User {
  id: ID!
  username: String!
  password: String!
  # shows: [Show]
}

# Slightly more complex version of the Show object
type Show {
  id: ID!
  # Each show has one headline perfomer, a Performer object, required
  performer: String!
  # Each show can have multiple opening acts, a String for now, not required
  openers: String
  # Venue is a string for now, required
  venue: String!
  # Show date is the custom scalar Date, required
  date: Date!
}

type Query {
  showById(id: ID!): Show
  allShows: [Show]
  userById(id: ID!): User
}

"""
When we create a user, we must send `username`, and `password` to the `createUser` mutation. This input type wraps those fields into one object.
"""
input CreateUserInput {
  # A User's unique user name.
  username: String!
  # A User's password.
  password: String!
}

input AddShowInput {
  # Headline performer, a string, required
  performer: String!
  # Opening acts, a string, not required
  openers: String
  # Venue is a string for now, required
  venue: String!
  # Date should be provided as a string of format YYYY-MM-DD, required
  dateProvided: String!
}

"""
When a `User` logs in, they get their token and customer information from this `LogInPayload` type. This is how user authentication is handled.
"""
type LogInPayload {
  "The entire `User` object for the recently logged in individual."
  user: User
  "The authorization token that can be used to run queries and mutations that require login."
  token: String!
}

"""
When a new user is created, this object will be returned from the `createUser` mutation.
"""
type CreateUserPayload {
  # The entire `User` object for the recently registered individual.
  user: User
  # A welcome message to the new `User` encouraging them to log in.
  message: String
}

type Mutation {
  addShow( 
    input: AddShowInput!
  ): Show
  """
  When you need to create a user, you'll need to send this mutation.
  """
  createUser(
    # REQUIRED: Send `username` and `password` as arguments
    input: CreateUserInput!
  ): CreateUserPayload!
  """
  A mutation used to log in a registered user. If you haven't created an account yet, start with the createUser mutation.
  """
  logIn(
    # REQUIRED: Send your unique `username` as an argument to log in
    username: String!
    # REQUIRED: Send your `password` as an argument to log in
    password: String!
  ): LogInPayload!
}