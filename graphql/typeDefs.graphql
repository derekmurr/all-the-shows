scalar Date

# type User {
#   id: ID!
#   username: String!
#   password: String!
#   shows: [Show]
# }

# Slightly more complex version of the Show object that links to Performers
type Show {
  id: ID!
  # Each show has one headline perfomer, a Performer object, required
  performer: String!
  # Each show can have multiple opening acts, a String for now, not required
  openers: String
  # Venue is a string for now, required
  venue: String!
  # Show date is the custom scalar Date, required
  date: Date!
}

type Query {
  showById: Show
  allShows: [Show]
}

input addShowInput {
  # Headline performer, a string, required
  performer: String!
  # Opening acts, a string, not required
  openers: String
  # Venue is a string for now, required
  venue: String!
  # Date should be provided as a string of format YYYY-MM-DD, required
  dateProvided: String!
}

type Mutation {
  addShow( 
    input: addShowInput!
  ): Show
}